USE polipiel;

## VISTAS

-- Vista 1: Ventas Totales por Cliente
-- Esta vista muestra el total de ventas por cada cliente.

CREATE VIEW polipiel.ventas_totales_por_cliente AS
SELECT 
    c.id_cliente,
    c.nombre,
    c.apellido,
    SUM(v.total) AS total_ventas
FROM polipiel.cliente c
JOIN polipiel.venta v ON c.id_cliente = v.fk_cliente
GROUP BY c.id_cliente, c.nombre, c.apellido;
    
-- Vista 2: Ventas por Canal de Venta
-- Esta vista muestra las ventas totales agrupadas por cada canal de venta.

CREATE VIEW polipiel.ventas_por_canal AS
SELECT 
    cv.nombre_canal,
    COUNT(v.id_venta) AS cantidad_ventas,
    SUM(v.total) AS total_ventas
FROM polipiel.venta v
JOIN polipiel.canal_venta cv ON v.fk_canal = cv.id_canal
GROUP BY cv.nombre_canal;

----------------------------------------------------------

## FUNCIONES

DROP FUNCTION IF EXISTS polipiel.fx_validar_email;
-- Function 1: Validar Formato de Email. Vamos a crear una función que valide si el email de un cliente está en el formato correcto.

DELIMITER //

CREATE FUNCTION polipiel.fx_validar_email(email VARCHAR(200))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE resultado BOOLEAN;
    SET resultado = (email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');
    RETURN resultado;
END //

DELIMITER ;

SELECT 
    nombre, 
    email, 
    polipiel.fx_validar_email(email) AS email_valido
FROM polipiel.cliente;

-- Function 2: Función para Validar Disponibilidad de Materiales. Esto puede ayudarte a prevenir situaciones donde intentes vender productos para los cuales no tienes suficientes materiales.

DROP FUNCTION IF EXISTS polipiel.fx_validar_stock_material;

DELIMITER //

CREATE FUNCTION polipiel.fx_validar_stock_material(fk_material INT, cantidad_requerida INT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE disponible INT;
    SELECT cantidad_disponible INTO disponible 
    FROM stock_material 
    WHERE stock_material.fk_material = fk_material; -- Usamos el parámetro de entrada
    RETURN disponible >= cantidad_requerida; -- Verificamos si el stock es suficiente
END //

DELIMITER ;

SELECT 
    fk_material, 
    cantidad_requerida, 
    polipiel.fx_validar_stock_material(fk_material, cantidad_requerida) AS suficiente_stock
FROM polipiel.producto_material;

----------------------------------------------------------

## PROCEDIMIENTOS

USE polipiel;

SELECT *
FROM polipiel.detalle_venta

-- PROCEDIMIENTO 1 -- Procedimiento para mantener actualiado los precios de ventas al aplicarse aumentos o rebajas %

DROP PROCEDURE IF EXISTS polipiel.sp_actualizar_precios_detalle_venta

DELIMITER //
CREATE PROCEDURE polipiel.sp_actualizar_precios_detalle_venta(
    IN porcentaje DECIMAL(5,2)
)
BEGIN
    IF NOT EXISTS (
        SELECT * 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_NAME='detalle_venta' 
        AND COLUMN_NAME='porcentaje_aplicado'
    ) THEN
        ALTER TABLE polipiel.detalle_venta ADD porcentaje_aplicado DECIMAL(5,2);
    END IF;

    -- Actualiza precios y subtotal
    UPDATE polipiel.detalle_venta
    SET precio_unitario = ROUND(precio_unitario * (1 + (porcentaje / 100)), 2),
        subtotal = ROUND(cantidad * (precio_unitario * (1 + (porcentaje / 100))), 2),
        porcentaje_aplicado = porcentaje;
END //

DELIMITER ;

SET SQL_SAFE_UPDATES = 0;

CALL polipiel.sp_actualizar_precios_detalle_venta(10); -- Aumenta los precios en un 10%
CALL polipiel.sp_actualizar_precios_detalle_venta(-5); -- Disminuye los precios en un 5%

SET SQL_SAFE_UPDATES = 1;

------------------------------------------

-- PROCEDIMIENTO 2 -- Procedimiento para Generar un Reporte de Ventas Mensual

DROP PROCEDURE IF EXISTS polipiel.reporte_ventas_mensual;

DELIMITER //

CREATE PROCEDURE polipiel.reporte_ventas_mensual(
    IN año INT,
    IN mes INT
)
BEGIN
    SELECT 
        p.nombre_producto,
        SUM(dv.cantidad) AS total_cantidad_vendida,
        SUM(dv.subtotal) AS total_ventas,
        GROUP_CONCAT(DISTINCT DATE(v.fecha_venta) ORDER BY v.fecha_venta ASC SEPARATOR ', ') AS fechas_ventas
    FROM 
        polipiel.venta v
    JOIN 
        polipiel.detalle_venta dv ON v.id_venta = dv.fk_venta
    JOIN 
        polipiel.producto p ON dv.fk_producto = p.id_producto
    WHERE 
        YEAR(v.fecha_venta) = año AND MONTH(v.fecha_venta) = mes
    GROUP BY 
        p.nombre_producto;
END //

DELIMITER ;

USE polipiel;

CALL reporte_ventas_mensual(2024, 1); -- Genera un reporte de ventas para enero de 2024

